IDR- Irreproducible Discovery Rate
Measures consistency between 2 biological replicates

Commands example to calculate top peaks for IDR ----------

cat rep1a.narrowPeak|sort -k8,8nr|head –n 100000 >rep1a_sorted.narrowPeak
cat rep1b.narrowPeak|sort -k8,8nr|head –n 100000 >rep1b_sorted.narrowPeak

**************************************************

NRF- Non Redundant Fraction of reads ----------

From ChIC Bioconductor package 
## 4 NRF calculation
    message("\nNRF calculation")
    
    ALL_TAGS <- sum(lengths(data$tags))
    UNIQUE_TAGS <- sum(lengths(lapply(data$tags, unique)))
    UNIQUE_TAGS_nostrand <- sum(lengths(lapply(data$tags, FUN = function(x) {
        unique(abs(x))
    })))
    
    NRF <- UNIQUE_TAGS/ALL_TAGS
    NRF_nostrand <- UNIQUE_TAGS_nostrand/ALL_TAGS
    
    ## to compensate for lib size differences
    
**************************************************

https://monashdatafluency.github.io/rnaseq-intro/qc.html ----------

How to get uniquely mapped reads for NRF?

Use the following command on the final alignment bam file-

samtools view -c -F 260 -q 255 ctrl_rep1_sorted_mdups.bam

What does the command mean?
samtools view - To view the contents of the bam file
-c - count the lines of the resultant output file
-F - samtools flag to exclude any reads/alignments
256 - the samtools flag code for secondary alignments
4 - samtools flag code for unmapped reads
260 - (256+4 from above) to give together to filter out all unnecessary reads
-q - quality score to be greater than
255 - mapping quality (MAPQ) score code for unmapped reads in samtools

The above command comes from the Monash data fluency RNAseq course - QC section.

The command I finally used to get uniquely mapped reads:

samtools view -c -F 260 trimmed_and_dupRemoved.bam

Since it turns out -q parameter is not needed here as we have already filtered duplicates and -m 2 score in previous steps of chipqeq pipeline

**************************************************

PBC- PCR Bottleneck Coeffiecient ----------

From ChIC Bioconductor package 

    ## N1= number of genomic locations to which EXACTLY one 
    ## unique mapping read maps
    ## Nd = the number of genomic locations to which AT LEAST 
    ## one unique mapping read
    ## maps, i.e. the number of non-redundant, unique mapping reads
    ## N1<-sum(sapply(data$tags, FUN=function(x) {checkDuplicate<-duplicated(x)
    ## duplicated_positions<-unique(x[checkDuplicate]) OUT<-x[!(x %in%
    ## duplicated_positions)] return(length(OUT)) }))
    
    N1 <- sum(unlist(lapply(data$tags, FUN = function(x) {
        checkDuplicate <- duplicated(x)
        duplicated_positions <- unique(x[checkDuplicate])
        OUT <- x[!(x %in% duplicated_positions)]
        return(length(OUT))
    })))

    pb$tick()
    
    ## Nd<-sum(sapply(lapply(data$tags, unique), length))
    Nd <- sum(unlist(lapply(data$tags, FUN = function(x) {
        length(unique(x))
    })))
    
    PBC <- N1/Nd
    tag.shift <- round(strandShift/2)
    finalList <- append(append(list(CC_StrandShift = strandShift, 
        tag.shift = tag.shift, 
        N1 = round(N1, 3), 
        Nd = round(Nd, 3), 
        CC_PBC = round(PBC, 3), 
        CC_readLength = read_length, 
        CC_UNIQUE_TAGS_LibSizeadjusted = UNIQUE_TAGS_LibSizeadjusted), 
        phantomScores), 
        STATS_NRF)
    pb$tick()
    return(finalList)
}

**************************************************

#From Sergi Sayols ChipQC R tools set

#' PCR bottleneck coefficient
#'
#' Calculate the PCR bottleneck coefficient as described in the ENCODE
#' guidelines.
#'
#' The PCR bottleneck coefficient (PBC) is a measure of library complexity, i.e. how skewed the
#' distribution of read counts per location is towards 1 read per location.
#' 
#' Defined in the ENCODE guidelines (https://genome.ucsc.edu/ENCODE/qualityMetrics.html) as:
#'
#' PBC = N1/Nd
#' 
#' with
#' \itemize{
#' \item{\code{N1}: Number of genomic locations to which EXACTLY one unique mapping read maps.}
#' \item{\code{Nd}: Number of genomic locations to which AT LEAST one unique mapping read maps, i.e.
#' the number of non-redundant, unique mapping reads.}
#' }
#' 
#' PBC is further described on the ENCODE Software Tools page. Provisionally, 0-0.5 is severe
#' bottlenecking, 0.5-0.8 is moderate bottlenecking, 0.8-0.9 is mild bottlenecking, while 0.9-1.0
#' is no bottlenecking. Very low values can indicate a technical problem, such as PCR bias, or a
#' biological finding, such as a very rare genomic feature. Nuclease-based assays (DNase, MNase)
#' detecting features with base-pair resolution (transcription factor footprints, positioned 
#' nucleosomes) are expected to recover the same read multiple times, resulting in a lower PBC
#' score for these assays. Note that the most complex library, random DNA, would approach 1.0, 
#' thus the very highest values can indicate technical problems with libraries. It is the practice
#' for some labs outside of ENCODE to remove redundant reads; after this has been done, the value
#' for this metric is 1.0, and this metric is not meaningful. 82\% of TF ChIP, 89\% of His ChIP, 77\%
#' of DNase, 98\% of FAIRE, and 97\% of control ENCODE datasets have no or mild bottlenecking.
#'
#' @param The path to the \code{.bam} file of a ChIP sample or a \code{GAlignments} object of the ChIP sample.
#' @return The PBC coefficient.
#' @examples
#' pbc <- PBC("IP.bam")
PBC <- function(IP) {

    require(GenomicAlignments)
    require(data.table)

    # load ChIP sample if necessary
    if (is.character(IP)) {
        if (!file.exists(IP))
            stop(paste("File", IP, "does NOT exist."))
        else
            aln <- readGAlignments(IP)
    } else if (class(IP) == "GAlignments") {
        aln <- IP
    } else {
        stop("IP must be a file path or a GAlignments object.")
    }

    # convert GAlignments object to data.table for fast aggregation
    aln <- data.table(
        strand=as.factor(BiocGenerics::as.vector(strand(aln))),
        seqnames=as.factor(BiocGenerics::as.vector(seqnames(aln))),
        pos=ifelse(strand(aln) == "+", start(aln), end(aln))
    )

    # aggregate reads by position and count them
    readsPerPosition <- aln[,list(count=.N), by=list(strand, seqnames, pos)]$count

    # PBC = positions with exactly 1 read / positions with at least 1 read
    PBC <- sum(readsPerPosition == 1) / length(readsPerPosition)

    return(PBC)
}

**************************************************

FRiP- Fraction of Reds in Peaks ----------

From the ChIC package for sharp peaks only. They have a separate section for broad peaks

        ## Frip sharp peaks 14

        sharpPeakRangesObject<-f_reduceOverlappingRegions(sharpPeakRangesObject)
    
        regions_data_list <- split(as.data.frame(sharpPeakRangesObject), 
            f = seqnames(sharpPeakRangesObject))

        if ( debug )
        {        
            if ( file.exists( file.path (getwd(),"sharpPeakRanges.bed" )))
            {
                file.remove( file.path (getwd(),"sharpPeakRanges.bed" ))
            }
            list <- lapply(regions_data_list, function(chr){
                #print(chr)
                text <- cbind(as.character(chr$seqnames), 
                    as.numeric(chr$start),
                    as.numeric(chr$end))

                write.table(text, 
                    file = file.path(getwd(),"sharpPeakRanges.bed"), 
                    append =TRUE, 
                    quote = FALSE, 
                    row.names = FALSE,
                    col.names = FALSE)
            })
        }

        ## pb$tick()

        chrl <- names(regions_data_list)
        names(chrl) <- chrl
        

        outcountsSharpPeak <- sum(unlist(lapply(chrl, FUN = function(chr) {
            sum(spp::points_within(x = abs(chip.test[[chr]]), 
                fs = regions_data_list[[chr]]$start, 
                fe = regions_data_list[[chr]]$end, 
                return.point.counts = TRUE))
        })))

    
        FRiP_sharpPeak <- outcountsSharpPeak/TOTAL_reads
    } else {
        TOTAL_reads <- 0
        FRiP_broadPeak <- 0
        outcountsBroadPeak <- 0
        FRiP_sharpPeak <- 0
        outcountsSharpPeak <- 0
    }

**************************************************
